{"version":3,"sources":["actions/actions.js","actionCreators/actionCreaters.js","Todo.js","TodoList.js","AddTodo.js","RemoveAll.js","Filters.js","App.js","serviceWorker.js","reducer/reducer.js","store.js","index.js"],"names":["SET_FILTER","SET_TODOS","ADD_TODO","REMOVE_TODO","REMOVE_ALL","TOGGLE","SHOWING","HIDING","addTodo","todo","type","connect","dispatch","removeTodo","id","toggle","props","content","itemClass","checked","className","onClick","e","stopPropagation","TodoList","this","title","todos","length","map","key","onCheckedToggle","React","Component","AddTodo","state","inputVal","changeInput","bind","newVal","target","value","setState","event","preventDefault","showing","setTimeout","hiding","onSubmit","onChange","visible","newTodo","Math","random","input","RemoveAll","removeAll","options","label","labelKey","Filters","console","log","activeFilter","option","changeFilter","newFilter","setFilter","App","filterTodos","filterType","filter","localTodos","window","localStorage","getItem","JSON","parse","setTodos","prevProps","prevState","snapshot","stringify","setItem","Boolean","location","hostname","match","rootReducer","message","action","concat","newTodos","currentTodo","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAAaA,EAAa,aACbC,EAAa,YACbC,EAAa,WACbC,EAAc,cAEdC,EAAa,aACbC,EAAS,SACTC,EAAU,UACVC,EAAS,SCEf,SAASC,EAAQC,GACpB,MAAO,CAAEC,KAAMR,EAAUO,QCS7B,IAKeE,cAAQ,MALI,SAAAC,GAAQ,MAAK,CACpCC,WAAY,SAACC,GAAQF,EDPlB,SAAoBE,GACvB,MAAO,CAAEJ,KAAMP,EAAaW,MCMED,CAAWC,KACzCC,OAAQ,SAACD,GAAQF,EDCd,SAAgBE,GACnB,MAAO,CAAEJ,KAAML,EAAQS,MCFGC,CAAOD,QAGtBH,EArBf,SAAcK,GAAQ,IACXC,EAAwBD,EAAxBC,QAASH,EAAeE,EAAfF,GACZI,EAAW,YAIf,OAL+BF,EAAXG,UAGhBD,GAAa,YAGb,yBAAKE,UAAWF,EAAWG,QAAS,WAAOL,EAAMD,OAAOD,KACnDG,EACD,0BACIG,UAAU,cACVC,QAAS,SAACC,GAAOA,EAAEC,kBAAkBP,EAAMH,WAAWC,KAF1D,SCcGU,E,YAtBX,WAAYR,GAAO,qEACTA,I,sEAED,IAAD,OACJ,OACI,yBAAKI,UAAU,aACX,4BAAKK,KAAKT,MAAMU,MAAhB,IAAuB,8BAAOD,KAAKT,MAAMW,MAAMC,SAG3CH,KAAKT,MAAMW,MAAME,KAAI,SAACpB,GAClB,OAAO,kBAAC,EAAD,iBACCA,EADD,CAEHqB,IAAKrB,EAAKK,GACViB,gBAAiB,EAAKf,MAAMe,2B,GAdjCC,IAAMC,W,OCAvBC,E,YACF,WAAYlB,GAAO,IAAD,8BACd,4CAAMA,KACDmB,MAAQ,CACTC,SAAU,IAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAK9B,QAAU,EAAKA,QAAQ8B,KAAb,gBAND,E,yEASNhB,GACR,IAAMiB,EAASjB,EAAEkB,OAAOC,MACxBhB,KAAKiB,SAAS,CACVN,SAAUG,M,8BAIVI,GAAO,IAAD,OACVA,EAAMC,iBACNnB,KAAKT,MAAMR,QAAQiB,KAAKU,MAAMC,UAC9BX,KAAKiB,SAAS,CACVN,SAAU,KAEdX,KAAKoB,UACLC,YAAW,WACT,EAAKC,WACL,Q,gCAIJtB,KAAKT,MAAM6B,QAAQpB,KAAKU,MAAMC,Y,+BAG9BX,KAAKT,MAAM+B,W,+BAOT,OACE,6BACE,0BACEC,SAAUvB,KAAKjB,SACf,2BACIE,KAAK,OACL+B,MAAOhB,KAAKU,MAAMC,SAClBa,SAAUxB,KAAKY,cACnB,wCACCZ,KAAKT,MAAMkC,QAAU,wBAAI9B,UAAU,OAAd,WAAmC,S,GAjDjDY,IAAMC,WA0EbtB,eAjBS,SAAAwB,GAAK,MAAK,CAChCe,QAASf,EAAMe,YAIW,SAAAtC,GAAQ,MAAK,CACvCJ,QAAS,SAAC2C,GAAavC,EAASJ,EAAQ,CACpCS,QAASkC,EACTrC,GAAIsC,KAAKC,SACTlC,SAAS,MAEb0B,QAAS,SAAAS,GAAU1C,EH5CV,CAAEF,KAAMJ,EAASG,KG4CU,CAClCQ,QAASqC,MAEXP,OAAQ,WAAOnC,EH3CN,CAAEF,KAAMH,QG8CJI,CAA6CuB,GC3EtDqB,E,iLACQ,IAAD,OACL,OAAO,4BAAQnC,UAAU,aAAaC,QAAS,kBAAK,EAAKL,MAAMwC,cAAxD,2B,GAFSxB,IAAMC,WAYftB,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACpC4C,UAAW,WJOR,IAAmB7B,EIPJf,EJQX,CAAEF,KAAMN,EAAYuB,cILhBhB,CAAkC4C,GCX3CE,G,MAAU,CACZ,CAACC,MAAO,QAASC,SAAU,OAC3B,CAACD,MAAO,wBAAeC,SAAU,aACjC,CAACD,MAAO,0BAAiBC,SAAU,iBAGjCC,E,iLACQ,IAAD,OAGL,OAFAC,QAAQC,IAAIrC,KAAKT,OACjB6C,QAAQC,IAAI,mBAAmBrC,KAAKT,MAAM+C,cACnC,6BAECN,EAAQ5B,KAAI,SAACmC,GACT,OAAO,yBAAKlC,IAAKsB,KAAKC,SAAUhC,QAAS,WACrC,EAAKL,MAAMiD,aAAaD,EAAOL,YAE9BK,EAAON,e,GAVVzB,aA4BPtB,eAVS,SAACwB,GACrB,MAAO,CACH4B,aAAc5B,EAAM4B,iBAID,SAAAnD,GAAQ,MAAK,CACtCqD,aAAc,SAACC,GAAetD,ELjCzB,SAAmBsD,GACtB,MAAO,CAAExD,KAAMV,EAAY+D,aAAcG,GKgCJC,CAAUD,QAGpCvD,CAA6CiD,GC5BtDQ,E,2MAkBJC,YAAc,SAAC1C,EAAO2C,GACpB,MAAkB,QAAfA,EACQ3C,EACc,cAAf2C,EACC3C,EAAM4C,QAAO,SAAC9D,GAAD,OAAUA,EAAKU,WAE5BQ,EAAM4C,QAAO,SAAC9D,GAAD,OAAWA,EAAKU,Y,mFArBtC0C,QAAQC,IAAI,oBAAkBrC,KAAKT,OAErC,IAAIwD,EAAaC,OAAOC,aAAaC,QAAQ,SAC1CH,IACDA,EAAcI,KAAKC,MAAML,IAE3B/C,KAAKT,MAAM8D,SAASN,GAAc,M,yCAGjBO,EAAWC,EAAWC,GAClCL,KAAKM,UAAUH,EAAUpD,SAAWiD,KAAKM,UAAUzD,KAAKT,MAAMW,QAC7D8C,OAAOC,aAAaS,QAAQ,QAASP,KAAKM,UAAUzD,KAAKT,MAAMW,U,+BAerE,OACI,yBAAKP,UAAU,MAAMN,GAAG,QACpB,yBAAKM,UAAU,2BACX,+CACA,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGR,kBAAC,EAAD,CAAUO,MAAOF,KAAK4C,YAAY5C,KAAKT,MAAMW,MAAOF,KAAKT,MAAM+C,qB,GAvCzD9B,aAuDHtB,eAVS,SAACwB,GAAD,MAAY,CAClC4B,aAAc5B,EAAM4B,aACpBpC,MAAOQ,EAAMR,UAGY,SAAAf,GAAQ,MAAK,CACpCkE,SAAU,SAACnD,GAAWf,ENvDnB,SAAkBe,GACrB,MAAO,CAAEjB,KAAMT,EAAW0B,SMsDKmD,CAASnD,KACxCnB,QAAS,SAACC,GAAUG,EAASJ,EAAQC,QAG1BE,CAA6CyD,GCrDxCgB,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2D,6lBChBN,IAsDeC,EAtDK,WAKR,IALkBrD,EAKnB,uDAL2B,CAClC4B,aAAc,MACdpC,MAAO,GACPuB,SAAS,EACTuC,QAAS,IACVC,EAAQ,uCACP,OAAQA,EAAOhF,MACX,KAAKV,EACD,OAAO,EAAP,GAAWmC,EAAX,CAAkB4B,aAAc2B,EAAO3B,eAC3C,KAAK9D,EACD,OAAO,EAAP,GAAWkC,EAAX,CAAkBR,MAAO+D,EAAO/D,QACpC,KAAKzB,EACD,OAAIwF,EAAOjF,KAAKQ,QAAQW,OAAS,EACxB,EAAP,GAAWO,GAEJ,EAAP,GAAWA,EAAX,CAAkBR,MAAOQ,EAAMR,MAAMgE,OAAO,CAACD,EAAOjF,SAE1D,KAAKN,EACD,IAAMyF,EAAWzD,EAAMR,MAAM4C,QAAO,SAAC9D,GAAD,OAAUA,EAAKK,KAAO4E,EAAO5E,MACjE,OAAO,EAAP,GACOqB,EADP,CAEIR,MAAOiE,IAEf,KAAKxF,EACD,MAAO,CACLuB,MAAO,IAEb,KAAKtB,EACD,YACK8B,EADL,CACYR,MAAOQ,EAAMR,MAAME,KAAI,SAAApB,GAC/B,GAAIiF,EAAO5E,KAAOL,EAAKK,GAAG,CACxB,IAAI+E,EAAW,KAAOpF,GAEtB,OADAoF,EAAY1E,SAAW0E,EAAY1E,QAC5B0E,EAEP,OAAOpF,OAIjB,KAAKH,EACH,OAAIoF,EAAOjF,KAAKQ,QAAQW,OAAS,EACxB,EAAP,GAAWO,GAEJ,EAAP,GAAWA,EAAX,CAAkBe,SAAS,IAG/B,KAAK3C,EACH,OAAO,EAAP,GAAW4B,EAAX,CAAkBe,SAAS,IAC7B,QACI,OAAOf,IC/CJ2D,EADDC,YAAYC,GCM1BC,IAASC,OAAO,mBADG,SAAClF,GAAD,OAAW,kBAAC,IAAD,CAAU8E,MAAOA,GAAO,kBAAC,EAAD,SACtC,MAAgBK,SAASC,eAAe,SHwHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.57b74b27.chunk.js","sourcesContent":["export const SET_FILTER = 'SET_FILTER';\nexport const SET_TODOS  = 'SET_TODOS';\nexport const ADD_TODO   = 'ADD_TODO';\nexport const REMOVE_TODO = 'REMOVE_TODO';\n\nexport const REMOVE_ALL = 'REMOVE_ALL';\nexport const TOGGLE = 'TOGGLE';\nexport const SHOWING = 'SHOWING';\nexport const HIDING = 'HIDING';","import { SET_FILTER, SET_TODOS, ADD_TODO, REMOVE_TODO, REMOVE_ALL, TOGGLE, SHOWING, HIDING } from \"../actions/actions\";\n\nexport function setFilter(newFilter) {\n    return { type: SET_FILTER, activeFilter: newFilter }\n}\n\nexport function setTodos(todos) {\n    return { type: SET_TODOS, todos }\n}\n\nexport function addTodo(todo) {\n    return { type: ADD_TODO, todo }\n}\n\nexport function removeTodo(id) {\n    return { type: REMOVE_TODO, id }\n}\n\n\nexport function removeAll(todos) {\n    return { type: REMOVE_ALL, todos }\n}\n\nexport function toggle(id) {\n    return { type: TOGGLE, id }\n}\n\nexport function showing(todo) {\n    return { type: SHOWING, todo }\n}\n\nexport function hiding() {\n    return { type: HIDING }\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {removeTodo, toggle} from \"./actionCreators/actionCreaters\";\n\nfunction Todo(props) {\n    const {content, id, checked} = props;\n    let itemClass= \"todo-item\";\n    if(checked){\n        itemClass += \" checked\";\n    }\n    return (\n        <div className={itemClass} onClick={() => {props.toggle(id);}}>\n            {content}\n            <span\n                className=\"remove-todo\"\n                onClick={(e) => {e.stopPropagation();props.removeTodo(id)}}>X</span>\n        </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeTodo: (id) => {dispatch(removeTodo(id))},\n    toggle: (id) => {dispatch(toggle(id))}\n});\n\nexport default connect(null, mapDispatchToProps)(Todo);","import React from 'react';\nimport Todo from './Todo';\n\n\nclass TodoList extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return (\n            <div className=\"todo-list\">\n                <h3>{this.props.title} <span>{this.props.todos.length}</span>\n                </h3>\n                {\n                    this.props.todos.map((todo) => {\n                        return <Todo\n                            {...todo}\n                            key={todo.id}\n                            onCheckedToggle={this.props.onCheckedToggle}\n                        />\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {addTodo,showing,hiding} from './actionCreators/actionCreaters';\n\nclass AddTodo extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            inputVal: \"\"\n        };\n        this.changeInput = this.changeInput.bind(this);\n        this.addTodo = this.addTodo.bind(this);\n    }\n\n    changeInput(e){\n        const newVal = e.target.value;\n        this.setState({\n            inputVal: newVal\n        });\n    }\n\n    addTodo(event){\n        event.preventDefault();\n        this.props.addTodo(this.state.inputVal);\n        this.setState({\n            inputVal: \"\"\n        });\n        this.showing();\n        setTimeout(()=>{\n          this.hiding();\n        },2500);\n    }\n\n    showing(){\n      this.props.showing(this.state.inputVal);\n    }\n    hiding(){\n      this.props.hiding();\n    }\n\n\n\n\n    render() {\n        return (\n          <div>\n            <form\n              onSubmit={this.addTodo}>\n              <input\n                  type=\"text\"\n                  value={this.state.inputVal}\n                  onChange={this.changeInput} />\n              <button>Ekle</button>\n              {this.props.visible ? <h2 className=\"not\">Eklendi</h2> : \"\"}\n          </form>\n\n        </div>\n      )\n    }\n}\n\nconst mapStateToProps = state => ({\n  visible: state.visible\n})\n\n\nconst mapDispatchToProps =  dispatch => ({\n  addTodo: (newTodo) => {dispatch(addTodo({\n      content: newTodo,\n      id: Math.random(),\n      checked: false\n  }))},\n  showing: input => {dispatch(showing({\n    content: input\n  }))},\n  hiding: () => {dispatch(hiding())}\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTodo);","import React from 'react';\nimport {connect} from 'react-redux'\nimport {removeAll} from './actionCreators/actionCreaters'\nclass RemoveAll extends React.Component {\n    render() {\n        return <button className=\"remove-all\" onClick={()=> this.props.removeAll()}>\n                Tümünü Sil\n        </button>\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeAll: () => {dispatch(removeAll())}\n});\n\nexport default connect(null, mapDispatchToProps)(RemoveAll);","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {setFilter} from \"./actionCreators/actionCreaters\";\n\nconst options = [\n    {label: \"Hepsi\", labelKey: \"all\"},\n    {label: \"Tamamlanmış\", labelKey: \"completed\"},\n    {label: \"Tamamlanmamış\", labelKey: \"uncompleted\"}\n];\n\nclass Filters extends Component {\n    render() {\n        console.log(this.props);\n        console.log(\"Active Filter is\",this.props.activeFilter)\n        return <div>\n            {\n                options.map((option) => {\n                    return <div key={Math.random()} onClick={() => {\n                        this.props.changeFilter(option.labelKey);\n                    }}>\n                        {option.label}\n                    </div>\n                })\n            }\n        </div>\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        activeFilter: state.activeFilter\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: (newFilter) => {dispatch(setFilter(newFilter))}\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filters);","import React, {Component} from 'react';\nimport TodoList from \"./TodoList\";\nimport AddTodo from \"./AddTodo\";\nimport RemoveAll from \"./RemoveAll\";\nimport \"./App.scss\";\nimport Filters from \"./Filters\";\nimport {connect} from \"react-redux\";\nimport {setTodos, addTodo} from \"./actionCreators/actionCreaters\";\n\n\nclass App extends Component {\n\n  componentDidMount() {\n      console.log(\"GÜncel proplar\", this.props);\n    // Component oluştuktan sonra gerekli olan datayı localstoragedan getiriyoruz.\n    let localTodos = window.localStorage.getItem(\"todos\");\n    if(localTodos){\n      localTodos  = JSON.parse(localTodos);\n    }\n    this.props.setTodos(localTodos || []);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n      if(JSON.stringify(prevProps.todos) !== JSON.stringify(this.props.todos)){\n          window.localStorage.setItem(\"todos\", JSON.stringify(this.props.todos))\n      }\n  }\n\n  filterTodos = (todos, filterType) => {\n    if(filterType === \"all\"){\n        return todos;\n    }else if (filterType === \"completed\"){\n        return todos.filter((todo) => todo.checked);\n    }else{\n        return todos.filter((todo) => !todo.checked);\n    }\n  }\n\n  render(){\n    return (\n        <div className=\"App\" id=\"todo\">\n            <div className=\"todo-list todo-list-add\">\n                <h3>Todo Ekle / Sil</h3>\n                <div>\n                    <AddTodo />\n                    <RemoveAll />\n                    <Filters />\n                </div>\n            </div>\n            <TodoList todos={this.filterTodos(this.props.todos, this.props.activeFilter)} />\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  activeFilter: state.activeFilter,\n  todos: state.todos\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setTodos: (todos) => {dispatch(setTodos(todos))},\n    addTodo: (todo) => {dispatch(addTodo(todo))}\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SET_FILTER, SET_TODOS, ADD_TODO, REMOVE_TODO, REMOVE_ALL,TOGGLE, SHOWING, HIDING} from \"../actions/actions\";\n\nconst rootReducer = function (state = {\n    activeFilter: \"all\",\n    todos: [],\n    visible: false,\n    message: ''\n}, action) {\n    switch (action.type) {\n        case SET_FILTER:\n            return {...state, activeFilter: action.activeFilter};\n        case SET_TODOS:\n            return {...state, todos: action.todos}\n        case ADD_TODO:\n            if (action.todo.content.length < 5){\n              return {...state};\n            } else{\n              return {...state, todos: state.todos.concat([action.todo])}\n            }\n        case REMOVE_TODO:\n            const newTodos = state.todos.filter((todo) => todo.id !== action.id);\n            return {\n                ...state,\n                todos: newTodos\n            };\n        case REMOVE_ALL:\n            return {\n              todos: []\n            }\n        case TOGGLE:\n            return{\n              ...state, todos: state.todos.map(todo => {\n                if (action.id === todo.id){\n                  let currentTodo = {...todo};\n                  currentTodo.checked = !currentTodo.checked;\n                  return currentTodo;\n                } else {\n                  return todo;\n                }\n              })\n            }\n        case SHOWING:\n          if (action.todo.content.length < 5){\n            return {...state};\n          } else {\n            return {...state, visible: true}\n          }\n\n        case HIDING:\n          return {...state, visible: false}\n        default:\n            return state;\n    }\n\n};\n\nexport default rootReducer","import {createStore} from 'redux';\nimport reducer from './reducer/reducer';\n\nconst store = createStore(reducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider, connect} from \"react-redux\";\nimport store  from \"./store\";\n\nconst ProvideApp = (props) => <Provider store={store}><App /></Provider>\nReactDOM.render(<ProvideApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}